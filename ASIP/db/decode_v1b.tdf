--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone IV GX" LPM_DECODES=10 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_compare 2018:09:12:13:04:24:SJ cbx_lpm_decode 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


-- Copyright (C) 2018  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.



--synthesis_resources = lut 18 
SUBDESIGN decode_v1b
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[9..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[9..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode274w[1..0]	: WIRE;
	w_anode283w[3..0]	: WIRE;
	w_anode300w[3..0]	: WIRE;
	w_anode310w[3..0]	: WIRE;
	w_anode320w[3..0]	: WIRE;
	w_anode330w[3..0]	: WIRE;
	w_anode340w[3..0]	: WIRE;
	w_anode350w[3..0]	: WIRE;
	w_anode360w[3..0]	: WIRE;
	w_anode372w[1..0]	: WIRE;
	w_anode379w[3..0]	: WIRE;
	w_anode390w[3..0]	: WIRE;
	w_anode400w[3..0]	: WIRE;
	w_anode410w[3..0]	: WIRE;
	w_anode420w[3..0]	: WIRE;
	w_anode430w[3..0]	: WIRE;
	w_anode440w[3..0]	: WIRE;
	w_anode450w[3..0]	: WIRE;
	w_data272w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[9..0] = eq_wire[9..0];
	eq_wire[] = ( ( w_anode450w[3..3], w_anode440w[3..3], w_anode430w[3..3], w_anode420w[3..3], w_anode410w[3..3], w_anode400w[3..3], w_anode390w[3..3], w_anode379w[3..3]), ( w_anode360w[3..3], w_anode350w[3..3], w_anode340w[3..3], w_anode330w[3..3], w_anode320w[3..3], w_anode310w[3..3], w_anode300w[3..3], w_anode283w[3..3]));
	w_anode274w[] = ( (w_anode274w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode283w[] = ( (w_anode283w[2..2] & (! w_data272w[2..2])), (w_anode283w[1..1] & (! w_data272w[1..1])), (w_anode283w[0..0] & (! w_data272w[0..0])), w_anode274w[1..1]);
	w_anode300w[] = ( (w_anode300w[2..2] & (! w_data272w[2..2])), (w_anode300w[1..1] & (! w_data272w[1..1])), (w_anode300w[0..0] & w_data272w[0..0]), w_anode274w[1..1]);
	w_anode310w[] = ( (w_anode310w[2..2] & (! w_data272w[2..2])), (w_anode310w[1..1] & w_data272w[1..1]), (w_anode310w[0..0] & (! w_data272w[0..0])), w_anode274w[1..1]);
	w_anode320w[] = ( (w_anode320w[2..2] & (! w_data272w[2..2])), (w_anode320w[1..1] & w_data272w[1..1]), (w_anode320w[0..0] & w_data272w[0..0]), w_anode274w[1..1]);
	w_anode330w[] = ( (w_anode330w[2..2] & w_data272w[2..2]), (w_anode330w[1..1] & (! w_data272w[1..1])), (w_anode330w[0..0] & (! w_data272w[0..0])), w_anode274w[1..1]);
	w_anode340w[] = ( (w_anode340w[2..2] & w_data272w[2..2]), (w_anode340w[1..1] & (! w_data272w[1..1])), (w_anode340w[0..0] & w_data272w[0..0]), w_anode274w[1..1]);
	w_anode350w[] = ( (w_anode350w[2..2] & w_data272w[2..2]), (w_anode350w[1..1] & w_data272w[1..1]), (w_anode350w[0..0] & (! w_data272w[0..0])), w_anode274w[1..1]);
	w_anode360w[] = ( (w_anode360w[2..2] & w_data272w[2..2]), (w_anode360w[1..1] & w_data272w[1..1]), (w_anode360w[0..0] & w_data272w[0..0]), w_anode274w[1..1]);
	w_anode372w[] = ( (w_anode372w[0..0] & data_wire[3..3]), enable_wire);
	w_anode379w[] = ( (w_anode379w[2..2] & (! w_data272w[2..2])), (w_anode379w[1..1] & (! w_data272w[1..1])), (w_anode379w[0..0] & (! w_data272w[0..0])), w_anode372w[1..1]);
	w_anode390w[] = ( (w_anode390w[2..2] & (! w_data272w[2..2])), (w_anode390w[1..1] & (! w_data272w[1..1])), (w_anode390w[0..0] & w_data272w[0..0]), w_anode372w[1..1]);
	w_anode400w[] = ( (w_anode400w[2..2] & (! w_data272w[2..2])), (w_anode400w[1..1] & w_data272w[1..1]), (w_anode400w[0..0] & (! w_data272w[0..0])), w_anode372w[1..1]);
	w_anode410w[] = ( (w_anode410w[2..2] & (! w_data272w[2..2])), (w_anode410w[1..1] & w_data272w[1..1]), (w_anode410w[0..0] & w_data272w[0..0]), w_anode372w[1..1]);
	w_anode420w[] = ( (w_anode420w[2..2] & w_data272w[2..2]), (w_anode420w[1..1] & (! w_data272w[1..1])), (w_anode420w[0..0] & (! w_data272w[0..0])), w_anode372w[1..1]);
	w_anode430w[] = ( (w_anode430w[2..2] & w_data272w[2..2]), (w_anode430w[1..1] & (! w_data272w[1..1])), (w_anode430w[0..0] & w_data272w[0..0]), w_anode372w[1..1]);
	w_anode440w[] = ( (w_anode440w[2..2] & w_data272w[2..2]), (w_anode440w[1..1] & w_data272w[1..1]), (w_anode440w[0..0] & (! w_data272w[0..0])), w_anode372w[1..1]);
	w_anode450w[] = ( (w_anode450w[2..2] & w_data272w[2..2]), (w_anode450w[1..1] & w_data272w[1..1]), (w_anode450w[0..0] & w_data272w[0..0]), w_anode372w[1..1]);
	w_data272w[2..0] = data_wire[2..0];
END;
--VALID FILE
